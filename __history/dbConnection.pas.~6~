unit dbConnection;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.PG,
  FireDAC.Phys.PGDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  IniFiles;

type
  DBConexao = record
    DBIp: String;
    DBName: String;
    DBPort: Integer;
    DBUser: String;
    DbSenha: String;

  end;

type
  TDbConexaoConfig = class(TDataModule)
    TDFConexao: TFDConnection;
    PGDriver: TFDPhysPgDriverLink;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  configIni: TDbConexaoConfig;

procedure LerArqIni();
procedure GravarArqIni();

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}
{$R *.dfm}

procedure GravarArqIni();
var
  GravarArqIni: TIniFile;
begin
  GravarArqIni := TIniFile.Create(ExtractFileDir(GetCurrentDir) +
    '/MonolitoDB.ini');
  try
    GravarArqIni.WriteString('BDCONFIG', 'IP', configIni.DBIp);
    GravarArqIni.WriteString('BDCONFIG', 'DBName', configIni.DBName);
    GravarArqIni.WriteInteger('BDCONFIG', 'DBPort', configIni.DBPort);
    GravarArqIni.WriteString('BDCONFIG', 'DBUser', configIni.DBUser);
    GravarArqIni.WriteString('BDCONFIG', 'DbSenha', configIni.DbSenha);
  finally
    FreeAndNil(GravarArqIni);
  end;

end;

procedure LerArqIni();
var
  LerArqIni: TIniFile;
begin

  LerArqIni := TIniFile.Create(ExtractFileDir(GetCurrentDir) +
    '/MonolitoDB.ini');
  try
    configIni.DBIp := LerArqIni.ReadString('BDCONFIG', 'IP', 'localhost');
    configIni.DBName := LerArqIni.ReadString('BDCONFIG', 'DBName', '');
    configIni.DBPort := LerArqIni.ReadInteger('BDCONFIG', 'DBPorta', 5432);
    configIni.DBUser := LerArqIni.ReadString('BDCONFIG', 'DBUser', 'postgres');
    configIni.DBSenha := LerArqIni.ReadString('BDCONFIG', 'DBSenha', '');
  finally
    FreeAndNil(LerArqIni);
  end;
end;

end.
